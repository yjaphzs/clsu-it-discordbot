"use strict";
/**
 * Compose the Discord webhook payload for a Facebook post.
 * The title is the first sentence of the message, and the body is the rest.
 * If an image is available, it is included in the embed.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.composeDiscordWebhookMessage = composeDiscordWebhookMessage;
exports.sendDiscordWebhookMessage = sendDiscordWebhookMessage;
const node_fetch_1 = __importDefault(require("node-fetch"));
/**
 * Compose the Discord webhook payload for a Facebook post.
 * @param post - The Facebook post object.
 * @param color - The color of the embed (default: #4289db).
 * @returns The Discord webhook payload.
 */
async function composeDiscordWebhookMessage(post, color = 0x4289db) {
    // Fallbacks for missing fields
    const content = post.message || "";
    const url = post.permalink_url || "";
    const image = post.full_picture || null;
    // Extract the title: first sentence before a dot or newline
    let title = content
        ? content.split(/[\.\n]/)[0].trim()
        : null;
    if (!title)
        title = null;
    let description = "";
    if (content) {
        description = `[**${title}**](${url})\n\n${content}`;
    }
    else if (image) {
        description = `[View on Facebook](${url})\n\nðŸ“· New announcement with image.`;
    }
    else {
        description = `[View on Facebook](${url})`;
    }
    // Format the timestamp to a more readable format (not used in payload, but kept for reference)
    let formattedTime = "";
    if (post.created_time) {
        const date = new Date(post.created_time);
        formattedTime = date.toLocaleString("en-US", {
            year: "numeric",
            month: "short",
            day: "2-digit",
            hour: "2-digit",
            minute: "2-digit",
            hour12: true,
        });
    }
    // Discord webhook payload structure
    const payload = {
        content: "",
        embeds: [
            {
                url: url,
                description: description,
                color: color,
                timestamp: post.created_time,
            },
        ],
    };
    // If the post has an image, add it to the embed
    if (image) {
        payload.embeds[0].image = { url: image };
    }
    return payload;
}
/**
 * Send a message payload to a Discord webhook URL.
 * @param webhookUrl - The Discord webhook URL.
 * @param payload - The payload generated by composeDiscordWebhookMessage.
 */
async function sendDiscordWebhookMessage(webhookUrl, payload) {
    const res = await (0, node_fetch_1.default)(webhookUrl, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
    });
    if (!res.ok) {
        console.error("Failed to send Discord webhook:", await res.text());
    }
}
